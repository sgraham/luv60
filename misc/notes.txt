Trivial jmp skipping is wrong when:

    0: jz <A>    ; pending continuation A
  ...: ...
    5: jmp <B>   ; pending continuation B

  - resolve <A> to next instr at 6: happily patches A to point at 6

  - resolve <B> to 6:
    realizes 5 is a `jmp rel 0`, rewinds output location to 5 (overwriting
    useless jmp), but now the jz is pointing past the block.

Could try to hack and slash (re-fix-up, defer fixups another layer, etc.)

But it seems like gen might need to build a graph of snip calls and their
connections, which seems like it might be pretty much a cps graph, or a post
order walk bytecode again.

--------------------------------------------------------------------------------

if 2:
    return 3
return 123

GEN: "init"
GEN: "func_entry"
GEN: "push_number"
GEN: "if"
PATCH: patching if_cond to 0xE
PATCH:  fixup at 0xA
PATCH: patching if_then to 0x1C
PATCH:  fixup at 0x18
GEN: "push_number"
GEN: "func_return"
PATCH: patching return_result to 0x26
PATCH:  fixup at 0x22
GEN: "jump"
PATCH: patching if_else to 0x33
PATCH:  fixup at 0x13
PATCH: patching if_after to 0x33
PATCH:  fixup at 0x2F
GEN: "push_number"
GEN: "func_return"
PATCH: patching return_result to 0x3D
PATCH:  fixup at 0x39
GEN: "jump"
PATCH: patching end_of_function to 0x4A
PATCH:  fixup at 0x46
GEN: "finish_and_dump"

  2           0 LOAD_GLOBAL              0 (x)
              2 POP_JUMP_IF_FALSE        8

  3           4 LOAD_CONST               1 (3)
              6 RETURN_VALUE

  4     >>    8 LOAD_CONST               2 (123)
             10 RETURN_VALUE


---

InstrData instrs[1<<20]
type Instr = u32

BlockData blocks[1<<20]
type Block = u32

BlockData:
  Phi phi
  Instr instr_start
  int num_instrs



---

I'm not sure if it's sensible to add interpolated Swift-style strings (or some
other style). The lexer indexing currently ignores \().

Adding ` to be like " also sort of works in the indexer. So the syntax could "x
+ y is `x+y`." which isn't too bad looking (sort of like shell). The first token
would be QUOTED though, and so the parser can't easily tell if it should be
building an interpolation list without looking ahead, and then if there's
expressions inside the escape it's arbitraily far to know if you're ever going
to get to a `. So that doesn't seem to work?

Sticking with \(), the parser has to some how fully parse/lex the string as it's
own little program. It won't be able to call parse_expression() to get the sub
things otherwise as the whole thing is one big STRING_QUOTED. Maybe that's the
way to go to keep the normal (non-interpolated) case fast. Maybe a memchr for
the escape character ($, `, #, whatever) to know if the slow interpolate re-lex is
required too (since those can't appear in actual code).


# vim: set tw=80:
